name: NVD Scanning for Clojure Projects

on:
  workflow_call:
    inputs:
      classpath-command:
        required: false
        description: nvd-clojure classpath command
        type: string
        default: 'clojure -Spath'
      nvd-clojure-version:
        required: false
        description: nvd-clojure version
        type: string
        default: '4.0.0'
      nvd-config-filename:
        required: false
        description: nvd-clojure configuration file
        type: string
        default: ''
      notify-slack:
        required: false
        description: Whether or not to report scan failures to Slack
        type: boolean
        default: false
      notify-link-var-name:
        required: false
        description: Slack workflow variable name for the CI run link
        type: string
        default: 'run_link'
    secrets:
      NVD_API_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout calling project
        uses: actions/checkout@v3

      - name: Set up Clojure env
        uses: yetanalytics/action-setup-env@v1

      - name: Get current date
        id: date
        run: |
          echo "y=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "m=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "d=$(date +'%d')" >> $GITHUB_OUTPUT
      
      - name: Cache any deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.gitlibs
          key: ${{ runner.os }}-nvd-all-deps-${{ steps.date.outputs.y }}-${{ steps.date.outputs.m }}-${{ steps.date.outputs.d }}
          restore-keys: |
            ${{ runner.os }}-nvd-all-deps-${{ steps.date.outputs.y }}-${{ steps.date.outputs.m }}-
            ${{ runner.os }}-nvd-all-deps-${{ steps.date.outputs.y }}-
            ${{ runner.os }}-nvd-all-deps-

      - name: Run NVD scan
        id: scan
        env:
          NVD_API_TOKEN: ${{ secrets.NVD_API_KEY }}
        run: >
          clojure -Sdeps
          '{:aliases
          {:nvd
          {:replace-deps
          {nvd-clojure/nvd-clojure
          {:mvn/version "${{ inputs.nvd-clojure-version }}"}}}}}'
          -Xnvd nvd.task/check
          :classpath '"'"$(${{ inputs.classpath-command }})"'"'
          :config-filename '"${{ inputs.nvd-config-filename }}"'
      
      - name: Produce Artifact
        uses: actions/upload-artifact@v3
        if: ${{ always() }} # Always produce an artifact
        with:
          name: ${{ github.sha }}-nvd-report
          path: target/nvd

      - name: Notify Slack
        if: ${{ always() && inputs.notify-slack && (steps.scan.outcome == 'failure') }} # Only run if specified and on failure
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "${{ inputs.notify-link-var-name }}": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
